<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTO Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">


<mapper namespace="com.coding404.myweb.product.service.ProductMapper">

	<insert id="regist">
	insert into PRODUCT(prod_enddate
						,prod_writer
						,prod_category
						,prod_name
						,prod_price
						,prod_count
						,prod_purchase_yn
						,prod_content
						,prod_comment )
	values(#{prod_enddate}
		  ,#{prod_writer}
		  ,#{prod_category}
		  ,#{prod_name}
		  ,#{prod_price}
		  ,#{prod_count}
		  ,#{prod_purchase_yn}
		  ,#{prod_content}
		  ,#{prod_comment})
	</insert>
	
	<!-- 
	동적쿼리 test 조건은 VO안에 선언된 getter명을 변수로 사용가능	
	CDATA 안에 들어간 값은 순수한 문자열로 인식을 시킴(부등호 사용할 때 적용)

	
	 -->
	 <!-- <select id="getList" resultType="ProductVO">
	 	select * 
	 	from PRODUCT 
	 	where prod_writer = 'aaa123' 
	 	<if test="searchName != '' and searchName != null">
	 		and prod_name like concat('%',#{searchName},'%')
	 	</if>
	 	<if test="searchContent != '' and searchContent != null">
	 		and prod_content like concat('%',#{searchName},'%')
	 	</if>
	 	<if test="startDate != '' and startDate != null">
	 		<![CDATA[and str_to_date(prod_enddate , '%Y-%m-%d') >= str_to_date(#{startDate} , '%Y-%m-%d')]]>
	 	</if>
	 	<if test="endDate != '' and endDate != null">
	 		<![CDATA[and str_to_date(prod_enddate , '%Y-%m-%d') <= str_to_date(#{endDate} , '%Y-%m-%d')]]>
	 	</if>
	 	order by
	 	<if test="searchPrice == 'asc'">
	 		prod_price asc,
	 	</if>
	 	<if test="searchPrice == 'desc'">
	 		prod_price desc,
	 	</if>
	 	prod_id desc
	 	limit #{pageStart} , #{amount}
	</select> -->
	
	<select id="getList" resultType="ProductVO">
	select P.*,C.CATEGORY_NAV
	FROM(
	select * 
	 	from PRODUCT 
	 	where prod_writer = #{user_id}
	 	<if test="cri.searchName != '' and cri.searchName != null">
	 		and prod_name like concat('%',#{cri.searchName},'%')
	 	</if>
	 	<if test="cri.searchContent != '' and cri.searchContent != null">
	 		and prod_content like concat('%',#{cri.searchName},'%')
	 	</if>
	 	<if test="cri.startDate != '' and cri.startDate != null">
	 		<![CDATA[and str_to_date(prod_enddate , '%Y-%m-%d') >= str_to_date(#{startDate} , '%Y-%m-%d')]]>
	 	</if>
	 	<if test="cri.endDate != '' and cri.endDate != null">
	 		<![CDATA[and str_to_date(prod_enddate , '%Y-%m-%d') <= str_to_date(#{endDate} , '%Y-%m-%d')]]>
	 	</if>
	 	order by
	 	<if test="cri.searchPrice == 'asc'">
	 		prod_price asc,
	 	</if>
	 	<if test="cri.searchPrice == 'desc'">
	 		prod_price desc,
	 	</if>
	 	prod_id desc
	 	limit #{cri.pageStart} , #{cri.amount}
) P
LEFT JOIN (SELECT
       CONCAT(A1.group_ID, A1.CATEGORY_ID) AS CATEGORY_KEY, ##카테고리 키 (그룹 + 키 형태로 카테고리분류)
 	   CASE A1.category_parent_LV
 	        WHEN 0 THEN A1.category_detail_NM
 			WHEN 1 THEN CONCAT(A2.category_detail_NM,' > ', A1.category_detail_NM)
 			WHEN 2 THEN CONCAT(A3.category_detail_NM, ' > ', A2.category_detail_NM,' > ', A1.category_detail_NM)
 	   END as CATEGORY_NAV
	FROM PRODUCT_CATEGORY A1
	LEFT OUTER JOIN PRODUCT_CATEGORY A2
	ON A1.CATEGORY_PARENT_LV = A2.CATEGORY_LV AND A1.CATEGORY_DETAIL_PARENT_LV = A2.CATEGORY_DETAIL_LV AND A1.GROUP_ID = A2.GROUP_ID
	LEFT OUTER JOIN PRODUCT_CATEGORY A3
	ON A2.CATEGORY_PARENT_LV = A3.CATEGORY_LV AND A2.CATEGORY_DETAIL_PARENT_LV = A3.CATEGORY_DETAIL_LV
	ORDER BY CATEGORY_NAV ASC) C
	ON P.PROD_CATEGORY = C.CATEGORY_KEY;
	
	</select>
	
	<select id="getTotal" resultType="int">
	select count(*) as total
	 from PRODUCT 
	 where prod_writer = #{user_id}
	 <if test="cri.searchName != '' and cri.searchName != null">
	 		and prod_name like concat('%',#{cri.searchName},'%')
	 	</if>
	 	<if test="cri.searchContent != '' and cri.searchContent != null">
	 		and prod_content like concat('%',#{cri.searchName},'%')
	 	</if>
	 	<if test="cri.startDate != '' and cri.startDate != null">
	 		<![CDATA[and str_to_date(prod_enddate , '%Y-%m-%d') >= str_to_date(#{startDate} , '%Y-%m-%d')]]>
	 	</if>
	 	<if test="cri.endDate != '' and cri.endDate != null">
	 		<![CDATA[and str_to_date(prod_enddate , '%Y-%m-%d') <= str_to_date(#{endDate} , '%Y-%m-%d')]]>
	 	</if>
	</select>
	
	<select id="getDetail" resultType="ProductVO">
		select * from PRODUCT P 
		LEFT JOIN (SELECT
       CONCAT(A1.group_ID, A1.CATEGORY_ID) AS CATEGORY_KEY, ##카테고리 키 (그룹 + 키 형태로 카테고리분류)
 	   CASE A1.category_parent_LV
 	        WHEN 0 THEN A1.category_detail_NM
 			WHEN 1 THEN CONCAT(A2.category_detail_NM,' > ', A1.category_detail_NM)
 			WHEN 2 THEN CONCAT(A3.category_detail_NM, ' > ', A2.category_detail_NM,' > ', A1.category_detail_NM)
 	   END as CATEGORY_NAV
FROM PRODUCT_CATEGORY A1
LEFT OUTER JOIN PRODUCT_CATEGORY A2
ON A1.CATEGORY_PARENT_LV = A2.CATEGORY_LV AND A1.CATEGORY_DETAIL_PARENT_LV = A2.CATEGORY_DETAIL_LV AND A1.GROUP_ID = A2.GROUP_ID
LEFT OUTER JOIN PRODUCT_CATEGORY A3
ON A2.CATEGORY_PARENT_LV = A3.CATEGORY_LV AND A2.CATEGORY_DETAIL_PARENT_LV = A3.CATEGORY_DETAIL_LV
ORDER BY CATEGORY_NAV ASC) C
ON P.PROD_CATEGORY = C.CATEGORY_KEY
where prod_id = #{prod_id}
	</select>
	
	<update id="update">
		update PRODUCT set prod_enddate = #{prod_enddate}, 
							prod_name = #{prod_name}, 
							prod_price = #{prod_price}, 
							prod_count = #{prod_count}, 
							prod_discount = #{prod_discount},
							prod_content = #{prod_content},
							prod_comment = #{prod_comment}
							where prod_id = #{prod_id}
	</update>
	
	<delete id="delete">
		delete from PRODUCT where prod_id = #{prod_id}
	</delete>
	
	<select id="getCategory" resultType="categoryVO">
		select * from PRODUCT_CATEGORY
		where category_lv = 1
	</select>
	
	<select id="getCategoryChild" resultType="categoryVO">
		select * from PRODUCT_CATEGORY
		where group_id = #{group_id}
		and category_parent_lv = #{category_lv}
		and category_detail_parent_lv = #{category_detail_lv}
	</select>
	<!-- 파일업로드 -->
	<!-- 
	1. insert 전에 product테이블의 키값이 FK로 사용되기 때뮨에 반드시 필요합니다.
		selectKey를 사용하면 됩니다.
	2.update , delete에도 사용가능
	3.조회된 결과가 1행이여야한다.
	
	
	resultType = 조회한 결과를 반환받을 타입
	keyProperty = 조회한 값을 저장할 속성명
	order는 BEFORE,AFTER 속성 사용가능, SQL문이 전 후 적용순서
	 -->
	<insert id="registFile">
	<selectKey resultType="int" keyProperty="prod_id" order="BEFORE">
		select max(prod_id) from PRODUCT where prod_writer = #{prod_writer}
	</selectKey>
	
	insert into PRODUCT_UPLOAD(
		filename,
		filepath,
		uuid,
		prod_id,
		prod_writer
	)
	values(
	#{filename},
	#{filepath},
	#{uuid},
	#{prod_id},
	#{prod_writer}
	)
	</insert>
	
	
	<select id="getImgs" resultType="ProductUploadVO">
		select * from PRODUCT_UPLOAD where prod_id = #{prod_id}
	</select>
</mapper>